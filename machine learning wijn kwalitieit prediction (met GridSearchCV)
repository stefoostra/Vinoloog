import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import sklearn

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn import metrics
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import ConfusionMatrixDisplay
from sklearn.datasets import load_breast_cancer
from sklearn.metrics import classification_report, confusion_matrix 
from sklearn.datasets import load_breast_cancer 
from sklearn.svm import SVC 
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split

import warnings
warnings.filterwarnings('ignore')

#eerste 5 rijen van de dataset
df = pd.read_excel(r"C:\Users\stefo\Downloads\WineQuality.xlsx")
print(df.head())

#type van de data per kolom
print(df.info())

#statistieken
print(df.describe())

#nul waarden per kolom
print(df.isnull().sum())

#nul waarden vervangen door gemiddeldes
for col in df.columns:
    if df[col].isnull().sum() > 0:
        df[col].fillna(df[col].mean(), inplace=True)

#histogrammem plotten
df.hist(bins=20, figsize=(10, 10))
plt.show()

#staafdiaram over de kwaliteit
plt.bar(df['quality'], df['alcohol'])
plt.xlabel('quality')
plt.ylabel('alcohol')
plt.show()

#kijken naar correlatie
plt.figure(figsize=(12, 12))
sb.heatmap(df.corr() > 0.7, annot=True, cbar=False)
plt.show()

#total sulfur dioxide verwijderen
df = df.drop('total sulfur dioxide', axis=1)

#kwaliteit verdelen in twee groepen
df['best quality'] = [1 if x > 5 else 0 for x in df.quality]

#getal koppelen aan type wijn
df.replace({'White Wine': 1, 'Red Wine': 0}, inplace=True)

#model selection
features = df.drop(['quality', 'best quality'], axis=1)
target = df['best quality']

xtrain, xtest, ytrain, ytest = train_test_split(
	features, target, test_size=0.2, random_state=40)

xtrain.shape, xtest.shape

# train the model on train set without using GridSearchCV 
model = SVC() 
model.fit(xtrain, ytrain) 

# print prediction results 
predictions = model.predict(xtest) 
print(classification_report(ytest, predictions))

# defining parameter range 
param_grid = {'C': [0.1, 1, 10, 100],  
              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], 
              'gamma':['scale', 'auto'],
              'kernel': ['linear']}  
   
grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3,n_jobs=-1) 
   
# fitting the model for grid search 
grid.fit(xtrain, ytrain) 
 
# print best parameter after tuning 
print(grid.best_params_) 
grid_predictions = grid.predict(xtest) 
   
# print classification report 
print(classification_report(ytest, grid_predictions)) 
